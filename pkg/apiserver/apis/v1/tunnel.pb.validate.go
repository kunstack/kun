// Code generated by protoc-gen-validate. DO NOT EDIT.
// source: tunnel.proto

package v1

import (
	"bytes"
	"errors"
	"fmt"
	"net"
	"net/mail"
	"net/url"
	"regexp"
	"sort"
	"strings"
	"time"
	"unicode/utf8"

	"google.golang.org/protobuf/types/known/anypb"
)

// ensure the imports are used
var (
	_ = bytes.MinRead
	_ = errors.New("")
	_ = fmt.Print
	_ = utf8.UTFMax
	_ = (*regexp.Regexp)(nil)
	_ = (*strings.Reader)(nil)
	_ = net.IPv4len
	_ = time.Duration(0)
	_ = (*url.URL)(nil)
	_ = (*mail.Address)(nil)
	_ = anypb.Any{}
	_ = sort.Sort
)

// define the regex for a UUID once up-front
var _tunnel_uuidPattern = regexp.MustCompile("^[0-9a-fA-F]{8}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{4}-[0-9a-fA-F]{12}$")

// Validate checks the field values on LoginRequest with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginRequest with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginRequestMultiError, or
// nil if none found.
func (m *LoginRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetVersion()) < 1 {
		err := LoginRequestValidationError{
			field:  "Version",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetOs()) < 1 {
		err := LoginRequestValidationError{
			field:  "Os",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetArch()) < 1 {
		err := LoginRequestValidationError{
			field:  "Arch",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPid() < 0 {
		err := LoginRequestValidationError{
			field:  "Pid",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetTimestamp() <= 0 {
		err := LoginRequestValidationError{
			field:  "Timestamp",
			reason: "value must be greater than 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := LoginRequestValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetSecretAccessKey()) < 1 {
		err := LoginRequestValidationError{
			field:  "SecretAccessKey",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginRequestMultiError(errors)
	}

	return nil
}

// LoginRequestMultiError is an error wrapping multiple validation errors
// returned by LoginRequest.ValidateAll() if the designated constraints aren't met.
type LoginRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginRequestMultiError) AllErrors() []error { return m }

// LoginRequestValidationError is the validation error returned by
// LoginRequest.Validate if the designated constraints aren't met.
type LoginRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginRequestValidationError) ErrorName() string { return "LoginRequestValidationError" }

// Error satisfies the builtin error interface
func (e LoginRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginRequestValidationError{}

// Validate checks the field values on LoginResponse with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *LoginResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on LoginResponse with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in LoginResponseMultiError, or
// nil if none found.
func (m *LoginResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *LoginResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if utf8.RuneCountInString(m.GetToken()) < 1 {
		err := LoginResponseValidationError{
			field:  "Token",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetExpiredAt()) < 1 {
		err := LoginResponseValidationError{
			field:  "ExpiredAt",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return LoginResponseMultiError(errors)
	}

	return nil
}

// LoginResponseMultiError is an error wrapping multiple validation errors
// returned by LoginResponse.ValidateAll() if the designated constraints
// aren't met.
type LoginResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m LoginResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m LoginResponseMultiError) AllErrors() []error { return m }

// LoginResponseValidationError is the validation error returned by
// LoginResponse.Validate if the designated constraints aren't met.
type LoginResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e LoginResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e LoginResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e LoginResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e LoginResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e LoginResponseValidationError) ErrorName() string { return "LoginResponseValidationError" }

// Error satisfies the builtin error interface
func (e LoginResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sLoginResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = LoginResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = LoginResponseValidationError{}

// Validate checks the field values on WatchTunnelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchTunnelsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchTunnelsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchTunnelsRequestMultiError, or nil if none found.
func (m *WatchTunnelsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchTunnelsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if l := utf8.RuneCountInString(m.GetHostname()); l < 1 || l > 253 {
		err := WatchTunnelsRequestValidationError{
			field:  "Hostname",
			reason: "value length must be between 1 and 253 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetHostname()); err != nil {
		err = WatchTunnelsRequestValidationError{
			field:  "Hostname",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _WatchTunnelsRequest_Protocol_InLookup[m.GetProtocol()]; !ok {
		err := WatchTunnelsRequestValidationError{
			field:  "Protocol",
			reason: "value must be in list [HTTP HTTPS]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if m.GetPoolSize() < 0 {
		err := WatchTunnelsRequestValidationError{
			field:  "PoolSize",
			reason: "value must be greater than or equal to 0",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WatchTunnelsRequestMultiError(errors)
	}

	return nil
}

func (m *WatchTunnelsRequest) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// WatchTunnelsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchTunnelsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchTunnelsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchTunnelsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchTunnelsRequestMultiError) AllErrors() []error { return m }

// WatchTunnelsRequestValidationError is the validation error returned by
// WatchTunnelsRequest.Validate if the designated constraints aren't met.
type WatchTunnelsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchTunnelsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchTunnelsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchTunnelsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchTunnelsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchTunnelsRequestValidationError) ErrorName() string {
	return "WatchTunnelsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchTunnelsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchTunnelsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchTunnelsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchTunnelsRequestValidationError{}

var _WatchTunnelsRequest_Protocol_InLookup = map[string]struct{}{
	"HTTP":  {},
	"HTTPS": {},
}

// Validate checks the field values on WatchTunnelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchTunnelsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchTunnelsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchTunnelsResponseMultiError, or nil if none found.
func (m *WatchTunnelsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchTunnelsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if err := m._validateUuid(m.GetTraceId()); err != nil {
		err = WatchTunnelsResponseValidationError{
			field:  "TraceId",
			reason: "value must be a valid UUID",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetTunnelToken()) < 1 {
		err := WatchTunnelsResponseValidationError{
			field:  "TunnelToken",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if len(errors) > 0 {
		return WatchTunnelsResponseMultiError(errors)
	}

	return nil
}

func (m *WatchTunnelsResponse) _validateUuid(uuid string) error {
	if matched := _tunnel_uuidPattern.MatchString(uuid); !matched {
		return errors.New("invalid uuid format")
	}

	return nil
}

// WatchTunnelsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchTunnelsResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchTunnelsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchTunnelsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchTunnelsResponseMultiError) AllErrors() []error { return m }

// WatchTunnelsResponseValidationError is the validation error returned by
// WatchTunnelsResponse.Validate if the designated constraints aren't met.
type WatchTunnelsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchTunnelsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchTunnelsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchTunnelsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchTunnelsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchTunnelsResponseValidationError) ErrorName() string {
	return "WatchTunnelsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchTunnelsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchTunnelsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchTunnelsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchTunnelsResponseValidationError{}

// Validate checks the field values on TunnelMessage with the rules defined in
// the proto definition for this message. If any rules are violated, the first
// error encountered is returned, or nil if there are no violations.
func (m *TunnelMessage) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on TunnelMessage with the rules defined
// in the proto definition for this message. If any rules are violated, the
// result is a list of violation errors wrapped in TunnelMessageMultiError, or
// nil if none found.
func (m *TunnelMessage) ValidateAll() error {
	return m.validate(true)
}

func (m *TunnelMessage) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _TunnelMessage_Command_InLookup[m.GetCommand()]; !ok {
		err := TunnelMessageValidationError{
			field:  "Command",
			reason: "value must be in list [PING PONG DATA CLOSE EOF]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	// no validation rules for Payload

	if len(errors) > 0 {
		return TunnelMessageMultiError(errors)
	}

	return nil
}

// TunnelMessageMultiError is an error wrapping multiple validation errors
// returned by TunnelMessage.ValidateAll() if the designated constraints
// aren't met.
type TunnelMessageMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m TunnelMessageMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m TunnelMessageMultiError) AllErrors() []error { return m }

// TunnelMessageValidationError is the validation error returned by
// TunnelMessage.Validate if the designated constraints aren't met.
type TunnelMessageValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e TunnelMessageValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e TunnelMessageValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e TunnelMessageValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e TunnelMessageValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e TunnelMessageValidationError) ErrorName() string { return "TunnelMessageValidationError" }

// Error satisfies the builtin error interface
func (e TunnelMessageValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sTunnelMessage.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = TunnelMessageValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = TunnelMessageValidationError{}

var _TunnelMessage_Command_InLookup = map[string]struct{}{
	"PING":  {},
	"PONG":  {},
	"DATA":  {},
	"CLOSE": {},
	"EOF":   {},
}

// Validate checks the field values on WatchUpstreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUpstreamsRequest) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUpstreamsRequest with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUpstreamsRequestMultiError, or nil if none found.
func (m *WatchUpstreamsRequest) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUpstreamsRequest) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if all {
		switch v := interface{}(m.GetStartedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchUpstreamsRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchUpstreamsRequestValidationError{
					field:  "StartedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetStartedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchUpstreamsRequestValidationError{
				field:  "StartedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchUpstreamsRequestMultiError(errors)
	}

	return nil
}

// WatchUpstreamsRequestMultiError is an error wrapping multiple validation
// errors returned by WatchUpstreamsRequest.ValidateAll() if the designated
// constraints aren't met.
type WatchUpstreamsRequestMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUpstreamsRequestMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUpstreamsRequestMultiError) AllErrors() []error { return m }

// WatchUpstreamsRequestValidationError is the validation error returned by
// WatchUpstreamsRequest.Validate if the designated constraints aren't met.
type WatchUpstreamsRequestValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUpstreamsRequestValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUpstreamsRequestValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUpstreamsRequestValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUpstreamsRequestValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUpstreamsRequestValidationError) ErrorName() string {
	return "WatchUpstreamsRequestValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUpstreamsRequestValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUpstreamsRequest.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUpstreamsRequestValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUpstreamsRequestValidationError{}

// Validate checks the field values on WatchUpstreamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the first error encountered is returned, or nil if there are no violations.
func (m *WatchUpstreamsResponse) Validate() error {
	return m.validate(false)
}

// ValidateAll checks the field values on WatchUpstreamsResponse with the rules
// defined in the proto definition for this message. If any rules are
// violated, the result is a list of violation errors wrapped in
// WatchUpstreamsResponseMultiError, or nil if none found.
func (m *WatchUpstreamsResponse) ValidateAll() error {
	return m.validate(true)
}

func (m *WatchUpstreamsResponse) validate(all bool) error {
	if m == nil {
		return nil
	}

	var errors []error

	if _, ok := _WatchUpstreamsResponse_EventType_InLookup[m.GetEventType()]; !ok {
		err := WatchUpstreamsResponseValidationError{
			field:  "EventType",
			reason: "value must be in list [ADDED MODIFIED DELETED]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if _, ok := _WatchUpstreamsResponse_Protocol_InLookup[m.GetProtocol()]; !ok {
		err := WatchUpstreamsResponseValidationError{
			field:  "Protocol",
			reason: "value must be in list [HTTP HTTPS]",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if l := utf8.RuneCountInString(m.GetHostname()); l < 1 || l > 253 {
		err := WatchUpstreamsResponseValidationError{
			field:  "Hostname",
			reason: "value length must be between 1 and 253 runes, inclusive",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if err := m._validateHostname(m.GetHostname()); err != nil {
		err = WatchUpstreamsResponseValidationError{
			field:  "Hostname",
			reason: "value must be a valid hostname",
			cause:  err,
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if utf8.RuneCountInString(m.GetAccessKeyId()) < 1 {
		err := WatchUpstreamsResponseValidationError{
			field:  "AccessKeyId",
			reason: "value length must be at least 1 runes",
		}
		if !all {
			return err
		}
		errors = append(errors, err)
	}

	if all {
		switch v := interface{}(m.GetCreatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "CreatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetCreatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchUpstreamsResponseValidationError{
				field:  "CreatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetUpdatedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "UpdatedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetUpdatedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchUpstreamsResponseValidationError{
				field:  "UpdatedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if all {
		switch v := interface{}(m.GetDeletedAt()).(type) {
		case interface{ ValidateAll() error }:
			if err := v.ValidateAll(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		case interface{ Validate() error }:
			if err := v.Validate(); err != nil {
				errors = append(errors, WatchUpstreamsResponseValidationError{
					field:  "DeletedAt",
					reason: "embedded message failed validation",
					cause:  err,
				})
			}
		}
	} else if v, ok := interface{}(m.GetDeletedAt()).(interface{ Validate() error }); ok {
		if err := v.Validate(); err != nil {
			return WatchUpstreamsResponseValidationError{
				field:  "DeletedAt",
				reason: "embedded message failed validation",
				cause:  err,
			}
		}
	}

	if len(errors) > 0 {
		return WatchUpstreamsResponseMultiError(errors)
	}

	return nil
}

func (m *WatchUpstreamsResponse) _validateHostname(host string) error {
	s := strings.ToLower(strings.TrimSuffix(host, "."))

	if len(host) > 253 {
		return errors.New("hostname cannot exceed 253 characters")
	}

	for _, part := range strings.Split(s, ".") {
		if l := len(part); l == 0 || l > 63 {
			return errors.New("hostname part must be non-empty and cannot exceed 63 characters")
		}

		if part[0] == '-' {
			return errors.New("hostname parts cannot begin with hyphens")
		}

		if part[len(part)-1] == '-' {
			return errors.New("hostname parts cannot end with hyphens")
		}

		for _, r := range part {
			if (r < 'a' || r > 'z') && (r < '0' || r > '9') && r != '-' {
				return fmt.Errorf("hostname parts can only contain alphanumeric characters or hyphens, got %q", string(r))
			}
		}
	}

	return nil
}

// WatchUpstreamsResponseMultiError is an error wrapping multiple validation
// errors returned by WatchUpstreamsResponse.ValidateAll() if the designated
// constraints aren't met.
type WatchUpstreamsResponseMultiError []error

// Error returns a concatenation of all the error messages it wraps.
func (m WatchUpstreamsResponseMultiError) Error() string {
	var msgs []string
	for _, err := range m {
		msgs = append(msgs, err.Error())
	}
	return strings.Join(msgs, "; ")
}

// AllErrors returns a list of validation violation errors.
func (m WatchUpstreamsResponseMultiError) AllErrors() []error { return m }

// WatchUpstreamsResponseValidationError is the validation error returned by
// WatchUpstreamsResponse.Validate if the designated constraints aren't met.
type WatchUpstreamsResponseValidationError struct {
	field  string
	reason string
	cause  error
	key    bool
}

// Field function returns field value.
func (e WatchUpstreamsResponseValidationError) Field() string { return e.field }

// Reason function returns reason value.
func (e WatchUpstreamsResponseValidationError) Reason() string { return e.reason }

// Cause function returns cause value.
func (e WatchUpstreamsResponseValidationError) Cause() error { return e.cause }

// Key function returns key value.
func (e WatchUpstreamsResponseValidationError) Key() bool { return e.key }

// ErrorName returns error name.
func (e WatchUpstreamsResponseValidationError) ErrorName() string {
	return "WatchUpstreamsResponseValidationError"
}

// Error satisfies the builtin error interface
func (e WatchUpstreamsResponseValidationError) Error() string {
	cause := ""
	if e.cause != nil {
		cause = fmt.Sprintf(" | caused by: %v", e.cause)
	}

	key := ""
	if e.key {
		key = "key for "
	}

	return fmt.Sprintf(
		"invalid %sWatchUpstreamsResponse.%s: %s%s",
		key,
		e.field,
		e.reason,
		cause)
}

var _ error = WatchUpstreamsResponseValidationError{}

var _ interface {
	Field() string
	Reason() string
	Key() bool
	Cause() error
	ErrorName() string
} = WatchUpstreamsResponseValidationError{}

var _WatchUpstreamsResponse_EventType_InLookup = map[string]struct{}{
	"ADDED":    {},
	"MODIFIED": {},
	"DELETED":  {},
}

var _WatchUpstreamsResponse_Protocol_InLookup = map[string]struct{}{
	"HTTP":  {},
	"HTTPS": {},
}
