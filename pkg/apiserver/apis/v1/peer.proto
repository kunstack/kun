/*
Copyright 2021 The KunStack Authors.
Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at
http://www.apache.org/licenses/LICENSE-2.0
Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

syntax = "proto3";

package compass.api.v1;

option go_package = "github.com/aapelismith/kuntunnel/pkg/compass/api/v1";

import "google/api/annotations.proto";
import "protoc-gen-openapiv2/options/annotations.proto";

option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_swagger) = {
  schemes: [HTTPS,HTTP];
  info: {
    title: "Compass后管系统API";
    version: "v1.0";
    description: "Compass后管系统相关的API"
  };
  security:{
    security_requirement: {
      key: "BearerAuth";
      value: {};
    }
  }
  security_definitions: {
    security: {
      key: "BearerAuth";
      value: {
        type: TYPE_API_KEY;
        in: IN_HEADER;
        name: 'Authorization';
        description: "Authentication token; prefixed by Bearer: Bearer <token>"
      }
    }
  };
};

message WatchUpstreamRequest {

}

message WatchUpstreamResponse {

}

// PeerService .
service PeerService {
  option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_tag) = {
    description: "Peer Manage Service"
  };

  // SignUpUser 注册账号
  rpc WatchUpstream (WatchUpstreamRequest) returns (stream WatchUpstreamResponse){
    option (google.api.http) = {
      get: "/v1/upstreams";
    };
    option (grpc.gateway.protoc_gen_openapiv2.options.openapiv2_operation) = {
      security:{}; // disable security check
      summary: "Watch All Upstream Change";
    };
  }
}
