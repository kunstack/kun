// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.9
// source: tunnel.proto

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// BackendServiceClient is the client API for BackendService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type BackendServiceClient interface {
	Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error)
	// WatchTunnels watch the changes of tunnels on the server side
	WatchTunnels(ctx context.Context, in *WatchTunnelsRequest, opts ...grpc.CallOption) (BackendService_WatchTunnelsClient, error)
	// ConnectTunnel attempt to connect tunnel using token
	ConnectTunnel(ctx context.Context, opts ...grpc.CallOption) (BackendService_ConnectTunnelClient, error)
}

type backendServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewBackendServiceClient(cc grpc.ClientConnInterface) BackendServiceClient {
	return &backendServiceClient{cc}
}

func (c *backendServiceClient) Login(ctx context.Context, in *LoginRequest, opts ...grpc.CallOption) (*LoginResponse, error) {
	out := new(LoginResponse)
	err := c.cc.Invoke(ctx, "/apiserver.api.v1.BackendService/Login", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *backendServiceClient) WatchTunnels(ctx context.Context, in *WatchTunnelsRequest, opts ...grpc.CallOption) (BackendService_WatchTunnelsClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackendService_ServiceDesc.Streams[0], "/apiserver.api.v1.BackendService/WatchTunnels", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceWatchTunnelsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type BackendService_WatchTunnelsClient interface {
	Recv() (*WatchTunnelsResponse, error)
	grpc.ClientStream
}

type backendServiceWatchTunnelsClient struct {
	grpc.ClientStream
}

func (x *backendServiceWatchTunnelsClient) Recv() (*WatchTunnelsResponse, error) {
	m := new(WatchTunnelsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *backendServiceClient) ConnectTunnel(ctx context.Context, opts ...grpc.CallOption) (BackendService_ConnectTunnelClient, error) {
	stream, err := c.cc.NewStream(ctx, &BackendService_ServiceDesc.Streams[1], "/apiserver.api.v1.BackendService/ConnectTunnel", opts...)
	if err != nil {
		return nil, err
	}
	x := &backendServiceConnectTunnelClient{stream}
	return x, nil
}

type BackendService_ConnectTunnelClient interface {
	Send(*TunnelMessage) error
	Recv() (*TunnelMessage, error)
	grpc.ClientStream
}

type backendServiceConnectTunnelClient struct {
	grpc.ClientStream
}

func (x *backendServiceConnectTunnelClient) Send(m *TunnelMessage) error {
	return x.ClientStream.SendMsg(m)
}

func (x *backendServiceConnectTunnelClient) Recv() (*TunnelMessage, error) {
	m := new(TunnelMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendServiceServer is the server API for BackendService service.
// All implementations must embed UnimplementedBackendServiceServer
// for forward compatibility
type BackendServiceServer interface {
	Login(context.Context, *LoginRequest) (*LoginResponse, error)
	// WatchTunnels watch the changes of tunnels on the server side
	WatchTunnels(*WatchTunnelsRequest, BackendService_WatchTunnelsServer) error
	// ConnectTunnel attempt to connect tunnel using token
	ConnectTunnel(BackendService_ConnectTunnelServer) error
	mustEmbedUnimplementedBackendServiceServer()
}

// UnimplementedBackendServiceServer must be embedded to have forward compatible implementations.
type UnimplementedBackendServiceServer struct {
}

func (UnimplementedBackendServiceServer) Login(context.Context, *LoginRequest) (*LoginResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Login not implemented")
}
func (UnimplementedBackendServiceServer) WatchTunnels(*WatchTunnelsRequest, BackendService_WatchTunnelsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchTunnels not implemented")
}
func (UnimplementedBackendServiceServer) ConnectTunnel(BackendService_ConnectTunnelServer) error {
	return status.Errorf(codes.Unimplemented, "method ConnectTunnel not implemented")
}
func (UnimplementedBackendServiceServer) mustEmbedUnimplementedBackendServiceServer() {}

// UnsafeBackendServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to BackendServiceServer will
// result in compilation errors.
type UnsafeBackendServiceServer interface {
	mustEmbedUnimplementedBackendServiceServer()
}

func RegisterBackendServiceServer(s grpc.ServiceRegistrar, srv BackendServiceServer) {
	s.RegisterService(&BackendService_ServiceDesc, srv)
}

func _BackendService_Login_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LoginRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(BackendServiceServer).Login(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/apiserver.api.v1.BackendService/Login",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(BackendServiceServer).Login(ctx, req.(*LoginRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _BackendService_WatchTunnels_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchTunnelsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(BackendServiceServer).WatchTunnels(m, &backendServiceWatchTunnelsServer{stream})
}

type BackendService_WatchTunnelsServer interface {
	Send(*WatchTunnelsResponse) error
	grpc.ServerStream
}

type backendServiceWatchTunnelsServer struct {
	grpc.ServerStream
}

func (x *backendServiceWatchTunnelsServer) Send(m *WatchTunnelsResponse) error {
	return x.ServerStream.SendMsg(m)
}

func _BackendService_ConnectTunnel_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(BackendServiceServer).ConnectTunnel(&backendServiceConnectTunnelServer{stream})
}

type BackendService_ConnectTunnelServer interface {
	Send(*TunnelMessage) error
	Recv() (*TunnelMessage, error)
	grpc.ServerStream
}

type backendServiceConnectTunnelServer struct {
	grpc.ServerStream
}

func (x *backendServiceConnectTunnelServer) Send(m *TunnelMessage) error {
	return x.ServerStream.SendMsg(m)
}

func (x *backendServiceConnectTunnelServer) Recv() (*TunnelMessage, error) {
	m := new(TunnelMessage)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// BackendService_ServiceDesc is the grpc.ServiceDesc for BackendService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var BackendService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.api.v1.BackendService",
	HandlerType: (*BackendServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Login",
			Handler:    _BackendService_Login_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchTunnels",
			Handler:       _BackendService_WatchTunnels_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "ConnectTunnel",
			Handler:       _BackendService_ConnectTunnel_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}

// PeerServiceClient is the client API for PeerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PeerServiceClient interface {
	// WatchTunnels watch the changes of upstreams on the server side
	WatchUpstreams(ctx context.Context, in *WatchUpstreamsRequest, opts ...grpc.CallOption) (PeerService_WatchUpstreamsClient, error)
}

type peerServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPeerServiceClient(cc grpc.ClientConnInterface) PeerServiceClient {
	return &peerServiceClient{cc}
}

func (c *peerServiceClient) WatchUpstreams(ctx context.Context, in *WatchUpstreamsRequest, opts ...grpc.CallOption) (PeerService_WatchUpstreamsClient, error) {
	stream, err := c.cc.NewStream(ctx, &PeerService_ServiceDesc.Streams[0], "/apiserver.api.v1.PeerService/WatchUpstreams", opts...)
	if err != nil {
		return nil, err
	}
	x := &peerServiceWatchUpstreamsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PeerService_WatchUpstreamsClient interface {
	Recv() (*WatchUpstreamsResponse, error)
	grpc.ClientStream
}

type peerServiceWatchUpstreamsClient struct {
	grpc.ClientStream
}

func (x *peerServiceWatchUpstreamsClient) Recv() (*WatchUpstreamsResponse, error) {
	m := new(WatchUpstreamsResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PeerServiceServer is the server API for PeerService service.
// All implementations must embed UnimplementedPeerServiceServer
// for forward compatibility
type PeerServiceServer interface {
	// WatchTunnels watch the changes of upstreams on the server side
	WatchUpstreams(*WatchUpstreamsRequest, PeerService_WatchUpstreamsServer) error
	mustEmbedUnimplementedPeerServiceServer()
}

// UnimplementedPeerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPeerServiceServer struct {
}

func (UnimplementedPeerServiceServer) WatchUpstreams(*WatchUpstreamsRequest, PeerService_WatchUpstreamsServer) error {
	return status.Errorf(codes.Unimplemented, "method WatchUpstreams not implemented")
}
func (UnimplementedPeerServiceServer) mustEmbedUnimplementedPeerServiceServer() {}

// UnsafePeerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PeerServiceServer will
// result in compilation errors.
type UnsafePeerServiceServer interface {
	mustEmbedUnimplementedPeerServiceServer()
}

func RegisterPeerServiceServer(s grpc.ServiceRegistrar, srv PeerServiceServer) {
	s.RegisterService(&PeerService_ServiceDesc, srv)
}

func _PeerService_WatchUpstreams_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(WatchUpstreamsRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PeerServiceServer).WatchUpstreams(m, &peerServiceWatchUpstreamsServer{stream})
}

type PeerService_WatchUpstreamsServer interface {
	Send(*WatchUpstreamsResponse) error
	grpc.ServerStream
}

type peerServiceWatchUpstreamsServer struct {
	grpc.ServerStream
}

func (x *peerServiceWatchUpstreamsServer) Send(m *WatchUpstreamsResponse) error {
	return x.ServerStream.SendMsg(m)
}

// PeerService_ServiceDesc is the grpc.ServiceDesc for PeerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PeerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "apiserver.api.v1.PeerService",
	HandlerType: (*PeerServiceServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "WatchUpstreams",
			Handler:       _PeerService_WatchUpstreams_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "tunnel.proto",
}
