//
//Copyright 2021 The KunStack Authors.
//Licensed under the Apache License, Version 2.0 (the "License");
//you may not use this file except in compliance with the License.
//You may obtain a copy of the License at
//http://www.apache.org/licenses/LICENSE-2.0
//Unless required by applicable law or agreed to in writing, software
//distributed under the License is distributed on an "AS IS" BASIS,
//WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
//See the License for the specific language governing permissions and
//limitations under the License.

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.21.9
// source: tunnel.proto

package v1

import (
	_ "github.com/envoyproxy/protoc-gen-validate/validate"
	_ "github.com/grpc-ecosystem/grpc-gateway/v2/protoc-gen-openapiv2/options"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type LoginRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Version         string `protobuf:"bytes,1,opt,name=version,proto3" json:"version,omitempty"`
	Os              string `protobuf:"bytes,2,opt,name=os,proto3" json:"os,omitempty"`
	Arch            string `protobuf:"bytes,3,opt,name=arch,proto3" json:"arch,omitempty"`
	Pid             int64  `protobuf:"varint,4,opt,name=pid,proto3" json:"pid,omitempty"`
	Timestamp       int64  `protobuf:"varint,5,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	AccessKeyId     string `protobuf:"bytes,6,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	SecretAccessKey string `protobuf:"bytes,7,opt,name=secretAccessKey,proto3" json:"secretAccessKey,omitempty"`
}

func (x *LoginRequest) Reset() {
	*x = LoginRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginRequest) ProtoMessage() {}

func (x *LoginRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginRequest.ProtoReflect.Descriptor instead.
func (*LoginRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{0}
}

func (x *LoginRequest) GetVersion() string {
	if x != nil {
		return x.Version
	}
	return ""
}

func (x *LoginRequest) GetOs() string {
	if x != nil {
		return x.Os
	}
	return ""
}

func (x *LoginRequest) GetArch() string {
	if x != nil {
		return x.Arch
	}
	return ""
}

func (x *LoginRequest) GetPid() int64 {
	if x != nil {
		return x.Pid
	}
	return 0
}

func (x *LoginRequest) GetTimestamp() int64 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *LoginRequest) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *LoginRequest) GetSecretAccessKey() string {
	if x != nil {
		return x.SecretAccessKey
	}
	return ""
}

type LoginResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Token     string `protobuf:"bytes,1,opt,name=token,proto3" json:"token,omitempty"`
	ExpiredAt string `protobuf:"bytes,2,opt,name=expiredAt,proto3" json:"expiredAt,omitempty"`
}

func (x *LoginResponse) Reset() {
	*x = LoginResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *LoginResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*LoginResponse) ProtoMessage() {}

func (x *LoginResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use LoginResponse.ProtoReflect.Descriptor instead.
func (*LoginResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{1}
}

func (x *LoginResponse) GetToken() string {
	if x != nil {
		return x.Token
	}
	return ""
}

func (x *LoginResponse) GetExpiredAt() string {
	if x != nil {
		return x.ExpiredAt
	}
	return ""
}

type WatchTunnelsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Hostname string `protobuf:"bytes,1,opt,name=hostname,proto3" json:"hostname,omitempty"`
	Protocol string `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	PoolSize int32  `protobuf:"varint,3,opt,name=poolSize,proto3" json:"poolSize,omitempty"`
}

func (x *WatchTunnelsRequest) Reset() {
	*x = WatchTunnelsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTunnelsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTunnelsRequest) ProtoMessage() {}

func (x *WatchTunnelsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTunnelsRequest.ProtoReflect.Descriptor instead.
func (*WatchTunnelsRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{2}
}

func (x *WatchTunnelsRequest) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WatchTunnelsRequest) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *WatchTunnelsRequest) GetPoolSize() int32 {
	if x != nil {
		return x.PoolSize
	}
	return 0
}

type WatchTunnelsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TraceId     string `protobuf:"bytes,1,opt,name=traceId,proto3" json:"traceId,omitempty"`
	TunnelToken string `protobuf:"bytes,2,opt,name=tunnelToken,proto3" json:"tunnelToken,omitempty"`
}

func (x *WatchTunnelsResponse) Reset() {
	*x = WatchTunnelsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchTunnelsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchTunnelsResponse) ProtoMessage() {}

func (x *WatchTunnelsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchTunnelsResponse.ProtoReflect.Descriptor instead.
func (*WatchTunnelsResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{3}
}

func (x *WatchTunnelsResponse) GetTraceId() string {
	if x != nil {
		return x.TraceId
	}
	return ""
}

func (x *WatchTunnelsResponse) GetTunnelToken() string {
	if x != nil {
		return x.TunnelToken
	}
	return ""
}

type TunnelMessage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Command string `protobuf:"bytes,1,opt,name=command,proto3" json:"command,omitempty"`
	Payload []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (x *TunnelMessage) Reset() {
	*x = TunnelMessage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TunnelMessage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TunnelMessage) ProtoMessage() {}

func (x *TunnelMessage) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TunnelMessage.ProtoReflect.Descriptor instead.
func (*TunnelMessage) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{4}
}

func (x *TunnelMessage) GetCommand() string {
	if x != nil {
		return x.Command
	}
	return ""
}

func (x *TunnelMessage) GetPayload() []byte {
	if x != nil {
		return x.Payload
	}
	return nil
}

type WatchUpstreamsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartedAt *timestamppb.Timestamp `protobuf:"bytes,1,opt,name=startedAt,proto3" json:"startedAt,omitempty"`
}

func (x *WatchUpstreamsRequest) Reset() {
	*x = WatchUpstreamsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUpstreamsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUpstreamsRequest) ProtoMessage() {}

func (x *WatchUpstreamsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUpstreamsRequest.ProtoReflect.Descriptor instead.
func (*WatchUpstreamsRequest) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{5}
}

func (x *WatchUpstreamsRequest) GetStartedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.StartedAt
	}
	return nil
}

type WatchUpstreamsResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EventType   string                 `protobuf:"bytes,1,opt,name=eventType,proto3" json:"eventType,omitempty"`
	Protocol    string                 `protobuf:"bytes,2,opt,name=protocol,proto3" json:"protocol,omitempty"`
	Hostname    string                 `protobuf:"bytes,3,opt,name=hostname,proto3" json:"hostname,omitempty"`
	AccessKeyId string                 `protobuf:"bytes,4,opt,name=accessKeyId,proto3" json:"accessKeyId,omitempty"`
	CreatedAt   *timestamppb.Timestamp `protobuf:"bytes,5,opt,name=createdAt,proto3" json:"createdAt,omitempty"`
	UpdatedAt   *timestamppb.Timestamp `protobuf:"bytes,6,opt,name=updatedAt,proto3" json:"updatedAt,omitempty"`
	DeletedAt   *timestamppb.Timestamp `protobuf:"bytes,7,opt,name=deletedAt,proto3" json:"deletedAt,omitempty"`
}

func (x *WatchUpstreamsResponse) Reset() {
	*x = WatchUpstreamsResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_tunnel_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *WatchUpstreamsResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*WatchUpstreamsResponse) ProtoMessage() {}

func (x *WatchUpstreamsResponse) ProtoReflect() protoreflect.Message {
	mi := &file_tunnel_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use WatchUpstreamsResponse.ProtoReflect.Descriptor instead.
func (*WatchUpstreamsResponse) Descriptor() ([]byte, []int) {
	return file_tunnel_proto_rawDescGZIP(), []int{6}
}

func (x *WatchUpstreamsResponse) GetEventType() string {
	if x != nil {
		return x.EventType
	}
	return ""
}

func (x *WatchUpstreamsResponse) GetProtocol() string {
	if x != nil {
		return x.Protocol
	}
	return ""
}

func (x *WatchUpstreamsResponse) GetHostname() string {
	if x != nil {
		return x.Hostname
	}
	return ""
}

func (x *WatchUpstreamsResponse) GetAccessKeyId() string {
	if x != nil {
		return x.AccessKeyId
	}
	return ""
}

func (x *WatchUpstreamsResponse) GetCreatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.CreatedAt
	}
	return nil
}

func (x *WatchUpstreamsResponse) GetUpdatedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.UpdatedAt
	}
	return nil
}

func (x *WatchUpstreamsResponse) GetDeletedAt() *timestamppb.Timestamp {
	if x != nil {
		return x.DeletedAt
	}
	return nil
}

var File_tunnel_proto protoreflect.FileDescriptor

var file_tunnel_proto_rawDesc = []byte{
	0x0a, 0x0c, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x10,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e,
	0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1f,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f,
	0x74, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x17, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61, 0x74, 0x65, 0x2f, 0x76, 0x61, 0x6c, 0x69, 0x64, 0x61,
	0x74, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2d, 0x67, 0x65, 0x6e, 0x2d, 0x6f, 0x70, 0x65, 0x6e, 0x61, 0x70, 0x69, 0x76, 0x32, 0x2f, 0x6f,
	0x70, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x97, 0x05, 0x0a, 0x0c, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x07, 0x76, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3b, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x92, 0x41, 0x31, 0x32, 0x25, 0x54, 0x68, 0x65, 0x20, 0x76, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x20, 0x61, 0x70, 0x70, 0x6c, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x08, 0x22,
	0x76, 0x30, 0x2e, 0x30, 0x2e, 0x31, 0x22, 0x52, 0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x12, 0x3e, 0x0a, 0x02, 0x6f, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x2e, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x24, 0x32, 0x18, 0x54, 0x79, 0x70, 0x65, 0x20, 0x6f,
	0x66, 0x20, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x20, 0x73, 0x79, 0x73, 0x74,
	0x65, 0x6d, 0x4a, 0x08, 0x22, 0x64, 0x61, 0x72, 0x77, 0x69, 0x6e, 0x22, 0x52, 0x02, 0x6f, 0x73,
	0x12, 0x4a, 0x0a, 0x04, 0x61, 0x72, 0x63, 0x68, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x36,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x2c, 0x32, 0x21, 0x41, 0x72, 0x63, 0x68,
	0x69, 0x74, 0x65, 0x63, 0x74, 0x75, 0x72, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65, 0x4a, 0x07, 0x22,
	0x61, 0x6d, 0x64, 0x36, 0x34, 0x22, 0x52, 0x04, 0x61, 0x72, 0x63, 0x68, 0x12, 0x3b, 0x0a, 0x03,
	0x70, 0x69, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x42, 0x29, 0xfa, 0x42, 0x04, 0x22, 0x02,
	0x28, 0x00, 0x92, 0x41, 0x1f, 0x32, 0x18, 0x50, 0x72, 0x6f, 0x63, 0x65, 0x73, 0x73, 0x20, 0x49,
	0x44, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4a,
	0x03, 0x31, 0x32, 0x33, 0x52, 0x03, 0x70, 0x69, 0x64, 0x12, 0x5c, 0x0a, 0x09, 0x74, 0x69, 0x6d,
	0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x05, 0x20, 0x01, 0x28, 0x03, 0x42, 0x3e, 0xfa, 0x42,
	0x04, 0x22, 0x02, 0x20, 0x00, 0x92, 0x41, 0x34, 0x32, 0x26, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74,
	0x61, 0x6d, 0x70, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x20, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x20, 0x64, 0x65, 0x76, 0x69, 0x63, 0x65,
	0x4a, 0x0a, 0x31, 0x36, 0x36, 0x38, 0x38, 0x35, 0x33, 0x32, 0x39, 0x33, 0x52, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x67, 0x0a, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xfa, 0x42,
	0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x3b, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20, 0x61, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x64, 0x4a, 0x26, 0x22, 0x34, 0x36,
	0x31, 0x65, 0x62, 0x61, 0x62, 0x63, 0x2d, 0x37, 0x35, 0x37, 0x61, 0x2d, 0x34, 0x31, 0x62, 0x65,
	0x2d, 0x61, 0x31, 0x35, 0x64, 0x2d, 0x38, 0x39, 0x61, 0x66, 0x62, 0x65, 0x65, 0x34, 0x30, 0x37,
	0x63, 0x39, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64,
	0x12, 0x9f, 0x01, 0x0a, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x4b, 0x65, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x42, 0x75, 0xfa, 0x42, 0x04, 0x72,
	0x02, 0x10, 0x01, 0x92, 0x41, 0x6b, 0x32, 0x15, 0x54, 0x68, 0x65, 0x20, 0x73, 0x65, 0x63, 0x72,
	0x65, 0x74, 0x20, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x4a, 0x52, 0x22,
	0x67, 0x73, 0x6b, 0x39, 0x47, 0x37, 0x75, 0x52, 0x4a, 0x76, 0x7a, 0x6f, 0x58, 0x43, 0x67, 0x78,
	0x48, 0x59, 0x79, 0x5a, 0x32, 0x5a, 0x32, 0x63, 0x4b, 0x38, 0x6a, 0x76, 0x71, 0x36, 0x61, 0x45,
	0x71, 0x4b, 0x46, 0x56, 0x33, 0x79, 0x32, 0x4b, 0x41, 0x6d, 0x78, 0x42, 0x47, 0x74, 0x6d, 0x44,
	0x6b, 0x51, 0x45, 0x79, 0x72, 0x42, 0x6b, 0x56, 0x6b, 0x6a, 0x74, 0x6d, 0x69, 0x36, 0x68, 0x6b,
	0x4e, 0x43, 0x55, 0x58, 0x39, 0x52, 0x77, 0x61, 0x4a, 0x4d, 0x35, 0x54, 0x46, 0x5a, 0x74, 0x38,
	0x22, 0x52, 0x0f, 0x73, 0x65, 0x63, 0x72, 0x65, 0x74, 0x41, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b,
	0x65, 0x79, 0x22, 0xb6, 0x01, 0x0a, 0x0d, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x59, 0x0a, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x42, 0x43, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x39, 0x32,
	0x0f, 0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x57, 0x65, 0x62, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x2e,
	0x4a, 0x26, 0x22, 0x37, 0x64, 0x61, 0x66, 0x36, 0x30, 0x61, 0x38, 0x2d, 0x33, 0x63, 0x65, 0x31,
	0x2d, 0x34, 0x34, 0x34, 0x30, 0x2d, 0x38, 0x35, 0x62, 0x66, 0x2d, 0x33, 0x34, 0x64, 0x61, 0x39,
	0x31, 0x35, 0x38, 0x31, 0x30, 0x38, 0x39, 0x22, 0x52, 0x05, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x12,
	0x4a, 0x0a, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x2c, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x22, 0x32, 0x20,
	0x54, 0x68, 0x65, 0x20, 0x65, 0x78, 0x70, 0x69, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e,
	0x52, 0x09, 0x65, 0x78, 0x70, 0x69, 0x72, 0x65, 0x64, 0x41, 0x74, 0x22, 0xbf, 0x02, 0x0a, 0x13,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x12, 0x56, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x3a, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10, 0x01, 0x18, 0xfd,
	0x01, 0x68, 0x01, 0x92, 0x41, 0x2b, 0x32, 0x16, 0x48, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65,
	0x20, 0x74, 0x6f, 0x20, 0x62, 0x65, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4a, 0x11,
	0x22, 0x77, 0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d,
	0x22, 0x52, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x72, 0x0a, 0x08, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x56, 0xfa,
	0x42, 0x0f, 0x72, 0x0d, 0x52, 0x04, 0x48, 0x54, 0x54, 0x50, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50,
	0x53, 0x92, 0x41, 0x41, 0x32, 0x28, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x75,
	0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x4a, 0x06,
	0x22, 0x48, 0x54, 0x54, 0x50, 0x22, 0xf2, 0x02, 0x04, 0x48, 0x54, 0x54, 0x50, 0xf2, 0x02, 0x05,
	0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12,
	0x5c, 0x0a, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x05, 0x42, 0x40, 0xfa, 0x42, 0x04, 0x1a, 0x02, 0x28, 0x00, 0x92, 0x41, 0x36, 0x32, 0x30, 0x54,
	0x68, 0x65, 0x20, 0x73, 0x69, 0x7a, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63,
	0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x20,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x70, 0x6f, 0x6f, 0x6c, 0x4a,
	0x02, 0x31, 0x32, 0x52, 0x08, 0x70, 0x6f, 0x6f, 0x6c, 0x53, 0x69, 0x7a, 0x65, 0x22, 0xbe, 0x02,
	0x0a, 0x14, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x72, 0x0a, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x58, 0xfa, 0x42, 0x05, 0x72, 0x03, 0xb0, 0x01,
	0x01, 0x92, 0x41, 0x4d, 0x32, 0x23, 0x54, 0x68, 0x65, 0x20, 0x69, 0x64, 0x20, 0x6f, 0x66, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x20, 0x6c, 0x69, 0x6e, 0x6b,
	0x20, 0x74, 0x72, 0x61, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x4a, 0x26, 0x22, 0x30, 0x32, 0x37, 0x38,
	0x33, 0x33, 0x43, 0x30, 0x2d, 0x34, 0x34, 0x34, 0x35, 0x2d, 0x34, 0x45, 0x30, 0x33, 0x2d, 0x38,
	0x42, 0x31, 0x37, 0x2d, 0x45, 0x42, 0x44, 0x42, 0x33, 0x43, 0x38, 0x44, 0x34, 0x46, 0x33, 0x41,
	0x22, 0x52, 0x07, 0x74, 0x72, 0x61, 0x63, 0x65, 0x49, 0x64, 0x12, 0xb1, 0x01, 0x0a, 0x0b, 0x74,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x42, 0x8e, 0x01, 0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x83, 0x01, 0x32, 0x22,
	0x4a, 0x53, 0x4f, 0x4e, 0x20, 0x57, 0x65, 0x62, 0x20, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x20, 0x66,
	0x6f, 0x72, 0x20, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x57, 0x61, 0x74, 0x63, 0x68, 0x69,
	0x6e, 0x67, 0x4a, 0x5d, 0x22, 0x65, 0x79, 0x4a, 0x68, 0x62, 0x47, 0x63, 0x69, 0x4f, 0x69, 0x4a,
	0x49, 0x55, 0x7a, 0x49, 0x31, 0x4e, 0x69, 0x49, 0x73, 0x49, 0x6e, 0x52, 0x35, 0x63, 0x43, 0x49,
	0x36, 0x49, 0x6b, 0x70, 0x58, 0x56, 0x43, 0x4a, 0x39, 0x2e, 0x65, 0x79, 0x4a, 0x68, 0x49, 0x6a,
	0x6f, 0x78, 0x66, 0x51, 0x2e, 0x5a, 0x34, 0x72, 0x47, 0x4b, 0x2d, 0x76, 0x36, 0x61, 0x32, 0x73,
	0x57, 0x41, 0x55, 0x51, 0x64, 0x6d, 0x41, 0x4c, 0x52, 0x33, 0x61, 0x59, 0x62, 0x58, 0x5a, 0x76,
	0x69, 0x4c, 0x72, 0x38, 0x6a, 0x32, 0x36, 0x61, 0x39, 0x6e, 0x64, 0x78, 0x5f, 0x62, 0x4d, 0x34,
	0x22, 0x52, 0x0b, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x22, 0x87,
	0x02, 0x0a, 0x0d, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x12, 0x92, 0x01, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x42, 0x78, 0xfa, 0x42, 0x20, 0x72, 0x1e, 0x52, 0x04, 0x50, 0x49, 0x4e, 0x47, 0x52,
	0x04, 0x50, 0x4f, 0x4e, 0x47, 0x52, 0x04, 0x44, 0x41, 0x54, 0x41, 0x52, 0x05, 0x43, 0x4c, 0x4f,
	0x53, 0x45, 0x52, 0x03, 0x45, 0x4f, 0x46, 0x92, 0x41, 0x52, 0x32, 0x25, 0x43, 0x6f, 0x6d, 0x6d,
	0x61, 0x6e, 0x64, 0x73, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x69, 0x6e, 0x20, 0x74, 0x75, 0x6e,
	0x6e, 0x65, 0x6c, 0x20, 0x63, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x4a, 0x06, 0x22, 0x50, 0x49, 0x4e, 0x47, 0x22, 0xf2, 0x02, 0x04, 0x50, 0x49, 0x4e, 0x47,
	0xf2, 0x02, 0x04, 0x50, 0x4f, 0x4e, 0x47, 0xf2, 0x02, 0x04, 0x44, 0x41, 0x54, 0x41, 0xf2, 0x02,
	0x05, 0x43, 0x4c, 0x4f, 0x53, 0x45, 0xf2, 0x02, 0x03, 0x45, 0x4f, 0x46, 0x52, 0x07, 0x63, 0x6f,
	0x6d, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x61, 0x0a, 0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x42, 0x47, 0x92, 0x41, 0x44, 0x32, 0x1a, 0x54, 0x68, 0x65,
	0x20, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20,
	0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x4a, 0x26, 0x22, 0x30, 0x45, 0x35, 0x39, 0x39, 0x30,
	0x38, 0x36, 0x2d, 0x38, 0x33, 0x30, 0x31, 0x2d, 0x34, 0x38, 0x42, 0x30, 0x2d, 0x38, 0x37, 0x30,
	0x33, 0x2d, 0x34, 0x44, 0x31, 0x42, 0x36, 0x46, 0x32, 0x32, 0x46, 0x32, 0x39, 0x35, 0x22, 0x52,
	0x07, 0x70, 0x61, 0x79, 0x6c, 0x6f, 0x61, 0x64, 0x22, 0x94, 0x01, 0x0a, 0x15, 0x57, 0x61, 0x74,
	0x63, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x12, 0x7b, 0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d,
	0x70, 0x42, 0x41, 0x92, 0x41, 0x3e, 0x32, 0x24, 0x53, 0x74, 0x61, 0x72, 0x74, 0x20, 0x74, 0x69,
	0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x64, 0x61, 0x74, 0x61, 0x20, 0x74,
	0x6f, 0x20, 0x62, 0x65, 0x20, 0x77, 0x61, 0x74, 0x63, 0x68, 0x65, 0x64, 0x4a, 0x16, 0x22, 0x31,
	0x39, 0x37, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a,
	0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x65, 0x64, 0x41, 0x74, 0x22,
	0xbe, 0x06, 0x0a, 0x16, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61,
	0x6d, 0x73, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x68, 0x0a, 0x09, 0x65, 0x76,
	0x65, 0x6e, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x42, 0x4a, 0xfa,
	0x42, 0x1c, 0x72, 0x1a, 0x52, 0x05, 0x41, 0x44, 0x44, 0x45, 0x44, 0x52, 0x08, 0x4d, 0x4f, 0x44,
	0x49, 0x46, 0x49, 0x45, 0x44, 0x52, 0x07, 0x44, 0x45, 0x4c, 0x45, 0x54, 0x45, 0x44, 0x92, 0x41,
	0x28, 0x32, 0x1d, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x20, 0x74, 0x79, 0x70, 0x65, 0x20, 0x6f, 0x66,
	0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x4a, 0x07, 0x22, 0x41, 0x44, 0x44, 0x45, 0x44, 0x22, 0x52, 0x09, 0x65, 0x76, 0x65, 0x6e, 0x74,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x70, 0x0a, 0x08, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x42, 0x54, 0xfa, 0x42, 0x0f, 0x72, 0x0d, 0x52, 0x04, 0x48,
	0x54, 0x54, 0x50, 0x52, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x92, 0x41, 0x3f, 0x32, 0x26, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x20, 0x75, 0x73, 0x65, 0x64, 0x20, 0x66, 0x6f, 0x72,
	0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x70, 0x73,
	0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x06, 0x22, 0x48, 0x54, 0x54, 0x50, 0x22, 0xf2, 0x02, 0x04,
	0x48, 0x54, 0x54, 0x50, 0xf2, 0x02, 0x05, 0x48, 0x54, 0x54, 0x50, 0x53, 0x52, 0x08, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x61, 0x0a, 0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45, 0xfa, 0x42, 0x09, 0x72, 0x07, 0x10,
	0x01, 0x18, 0xfd, 0x01, 0x68, 0x01, 0x92, 0x41, 0x36, 0x32, 0x21, 0x48, 0x6f, 0x73, 0x74, 0x20,
	0x6e, 0x61, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x11, 0x22, 0x77,
	0x77, 0x77, 0x2e, 0x65, 0x78, 0x61, 0x6d, 0x70, 0x6c, 0x65, 0x2e, 0x63, 0x6f, 0x6d, 0x22, 0x52,
	0x08, 0x68, 0x6f, 0x73, 0x74, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x67, 0x0a, 0x0b, 0x61, 0x63, 0x63,
	0x65, 0x73, 0x73, 0x4b, 0x65, 0x79, 0x49, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x42, 0x45,
	0xfa, 0x42, 0x04, 0x72, 0x02, 0x10, 0x01, 0x92, 0x41, 0x3b, 0x32, 0x11, 0x54, 0x68, 0x65, 0x20,
	0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x20, 0x6b, 0x65, 0x79, 0x20, 0x69, 0x64, 0x4a, 0x26, 0x22,
	0x34, 0x36, 0x31, 0x65, 0x62, 0x61, 0x62, 0x63, 0x2d, 0x37, 0x35, 0x37, 0x61, 0x2d, 0x34, 0x31,
	0x62, 0x65, 0x2d, 0x61, 0x31, 0x35, 0x64, 0x2d, 0x38, 0x39, 0x61, 0x66, 0x62, 0x65, 0x65, 0x34,
	0x30, 0x37, 0x63, 0x39, 0x22, 0x52, 0x0b, 0x61, 0x63, 0x63, 0x65, 0x73, 0x73, 0x4b, 0x65, 0x79,
	0x49, 0x64, 0x12, 0x80, 0x01, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61,
	0x6d, 0x70, 0x42, 0x46, 0x92, 0x41, 0x43, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x63, 0x72, 0x65,
	0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68,
	0x65, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x4a, 0x16, 0x22, 0x31, 0x39, 0x37, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54,
	0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x63, 0x72, 0x65, 0x61,
	0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x76, 0x0a, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64,
	0x41, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73,
	0x74, 0x61, 0x6d, 0x70, 0x42, 0x3c, 0x92, 0x41, 0x39, 0x32, 0x1f, 0x55, 0x70, 0x64, 0x61, 0x74,
	0x65, 0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x16, 0x22, 0x31, 0x39, 0x37,
	0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x5a, 0x22, 0x52, 0x09, 0x75, 0x70, 0x64, 0x61, 0x74, 0x65, 0x64, 0x41, 0x74, 0x12, 0x80, 0x01,
	0x0a, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x54, 0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x42, 0x46, 0x92,
	0x41, 0x43, 0x32, 0x29, 0x54, 0x68, 0x65, 0x20, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x69, 0x6f, 0x6e,
	0x20, 0x74, 0x69, 0x6d, 0x65, 0x20, 0x6f, 0x66, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x4a, 0x16, 0x22,
	0x31, 0x39, 0x37, 0x30, 0x2d, 0x30, 0x31, 0x2d, 0x30, 0x31, 0x54, 0x30, 0x30, 0x3a, 0x30, 0x30,
	0x3a, 0x30, 0x30, 0x5a, 0x22, 0x52, 0x09, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x41, 0x74,
	0x32, 0xeb, 0x03, 0x0a, 0x0e, 0x42, 0x61, 0x63, 0x6b, 0x65, 0x6e, 0x64, 0x53, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x12, 0x70, 0x0a, 0x05, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1e, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1f, 0x2e, 0x61,
	0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e,
	0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x26, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x0e, 0x22, 0x09, 0x2f, 0x76, 0x31, 0x2f, 0x6c, 0x6f, 0x67, 0x69, 0x6e,
	0x3a, 0x01, 0x2a, 0x92, 0x41, 0x0f, 0x12, 0x0b, 0x55, 0x73, 0x65, 0x72, 0x20, 0x6c, 0x6f, 0x67,
	0x69, 0x6e, 0x2e, 0x62, 0x00, 0x12, 0xa8, 0x01, 0x0a, 0x0c, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x12, 0x25, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54,
	0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x26, 0x2e,
	0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31,
	0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x47, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0d, 0x12, 0x0b, 0x2f,
	0x76, 0x31, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x92, 0x41, 0x31, 0x12, 0x2f, 0x57,
	0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65, 0x73,
	0x20, 0x6f, 0x66, 0x20, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x20, 0x6f, 0x6e, 0x20, 0x74,
	0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64, 0x65, 0x30, 0x01,
	0x12, 0x98, 0x01, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x54, 0x75, 0x6e, 0x6e,
	0x65, 0x6c, 0x12, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73, 0x73,
	0x61, 0x67, 0x65, 0x1a, 0x1f, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x22, 0x41, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x10, 0x22, 0x0b, 0x2f, 0x76,
	0x31, 0x2f, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x73, 0x3a, 0x01, 0x2a, 0x92, 0x41, 0x28, 0x12,
	0x26, 0x41, 0x74, 0x74, 0x65, 0x6d, 0x70, 0x74, 0x20, 0x74, 0x6f, 0x20, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x20, 0x74, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x75, 0x73, 0x69, 0x6e, 0x67,
	0x20, 0x74, 0x6f, 0x6b, 0x65, 0x6e, 0x2e, 0x28, 0x01, 0x30, 0x01, 0x1a, 0x21, 0x92, 0x41, 0x1e,
	0x12, 0x1c, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x20, 0x6d, 0x61, 0x6e, 0x61, 0x67,
	0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x2e, 0x32, 0xe1,
	0x01, 0x0a, 0x0b, 0x50, 0x65, 0x65, 0x72, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x12, 0xb2,
	0x01, 0x0a, 0x0e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d,
	0x73, 0x12, 0x27, 0x2e, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61, 0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65,
	0x61, 0x6d, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x28, 0x2e, 0x61, 0x70, 0x69,
	0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x57, 0x61,
	0x74, 0x63, 0x68, 0x55, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x4b, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x0f, 0x12, 0x0d, 0x2f, 0x76,
	0x31, 0x2f, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x92, 0x41, 0x33, 0x12, 0x31,
	0x57, 0x61, 0x74, 0x63, 0x68, 0x20, 0x74, 0x68, 0x65, 0x20, 0x63, 0x68, 0x61, 0x6e, 0x67, 0x65,
	0x73, 0x20, 0x6f, 0x66, 0x20, 0x75, 0x70, 0x73, 0x74, 0x72, 0x65, 0x61, 0x6d, 0x73, 0x20, 0x6f,
	0x6e, 0x20, 0x74, 0x68, 0x65, 0x20, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x20, 0x73, 0x69, 0x64,
	0x65, 0x30, 0x01, 0x1a, 0x1d, 0x92, 0x41, 0x1a, 0x12, 0x18, 0x50, 0x65, 0x65, 0x72, 0x20, 0x6d,
	0x61, 0x6e, 0x61, 0x67, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x20, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x2e, 0x42, 0x95, 0x02, 0x5a, 0x2f, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x61, 0x61, 0x70, 0x65, 0x6c, 0x69, 0x73, 0x6d, 0x69, 0x74, 0x68, 0x2f, 0x6b, 0x75,
	0x6e, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x61, 0x70, 0x69, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x92, 0x41, 0xe0, 0x01, 0x12, 0x86, 0x01, 0x0a, 0x17, 0x4b,
	0x75, 0x6e, 0x20, 0x54, 0x75, 0x6e, 0x6e, 0x65, 0x6c, 0x20, 0x41, 0x70, 0x69, 0x20, 0x44, 0x6f,
	0x63, 0x75, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x65, 0x41, 0x20, 0x66, 0x61, 0x73, 0x74, 0x20, 0x72,
	0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x20, 0x70, 0x72, 0x6f, 0x78, 0x79, 0x20, 0x74, 0x6f, 0x20,
	0x68, 0x65, 0x6c, 0x70, 0x20, 0x79, 0x6f, 0x75, 0x20, 0x65, 0x78, 0x70, 0x6f, 0x73, 0x65, 0x20,
	0x61, 0x20, 0x6c, 0x6f, 0x63, 0x61, 0x6c, 0x20, 0x68, 0x74, 0x74, 0x70, 0x20, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x20, 0x62, 0x65, 0x68, 0x69, 0x6e, 0x64, 0x20, 0x61, 0x20, 0x4e, 0x41, 0x54,
	0x20, 0x6f, 0x72, 0x20, 0x66, 0x69, 0x72, 0x65, 0x77, 0x61, 0x6c, 0x6c, 0x20, 0x74, 0x6f, 0x20,
	0x74, 0x68, 0x65, 0x20, 0x69, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x65, 0x74, 0x2e, 0x32, 0x04, 0x76,
	0x31, 0x2e, 0x30, 0x2a, 0x02, 0x02, 0x01, 0x5a, 0x3c, 0x0a, 0x3a, 0x0a, 0x0d, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x29, 0x08, 0x02, 0x12, 0x14,
	0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x20, 0x74,
	0x6f, 0x6b, 0x65, 0x6e, 0x1a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x7a, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x20, 0x02, 0x62, 0x13, 0x0a, 0x11, 0x0a, 0x0d, 0x41, 0x75, 0x74, 0x68, 0x6f,
	0x72, 0x69, 0x7a, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x00, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_tunnel_proto_rawDescOnce sync.Once
	file_tunnel_proto_rawDescData = file_tunnel_proto_rawDesc
)

func file_tunnel_proto_rawDescGZIP() []byte {
	file_tunnel_proto_rawDescOnce.Do(func() {
		file_tunnel_proto_rawDescData = protoimpl.X.CompressGZIP(file_tunnel_proto_rawDescData)
	})
	return file_tunnel_proto_rawDescData
}

var file_tunnel_proto_msgTypes = make([]protoimpl.MessageInfo, 7)
var file_tunnel_proto_goTypes = []interface{}{
	(*LoginRequest)(nil),           // 0: apiserver.api.v1.LoginRequest
	(*LoginResponse)(nil),          // 1: apiserver.api.v1.LoginResponse
	(*WatchTunnelsRequest)(nil),    // 2: apiserver.api.v1.WatchTunnelsRequest
	(*WatchTunnelsResponse)(nil),   // 3: apiserver.api.v1.WatchTunnelsResponse
	(*TunnelMessage)(nil),          // 4: apiserver.api.v1.TunnelMessage
	(*WatchUpstreamsRequest)(nil),  // 5: apiserver.api.v1.WatchUpstreamsRequest
	(*WatchUpstreamsResponse)(nil), // 6: apiserver.api.v1.WatchUpstreamsResponse
	(*timestamppb.Timestamp)(nil),  // 7: google.protobuf.Timestamp
}
var file_tunnel_proto_depIdxs = []int32{
	7, // 0: apiserver.api.v1.WatchUpstreamsRequest.startedAt:type_name -> google.protobuf.Timestamp
	7, // 1: apiserver.api.v1.WatchUpstreamsResponse.createdAt:type_name -> google.protobuf.Timestamp
	7, // 2: apiserver.api.v1.WatchUpstreamsResponse.updatedAt:type_name -> google.protobuf.Timestamp
	7, // 3: apiserver.api.v1.WatchUpstreamsResponse.deletedAt:type_name -> google.protobuf.Timestamp
	0, // 4: apiserver.api.v1.BackendService.Login:input_type -> apiserver.api.v1.LoginRequest
	2, // 5: apiserver.api.v1.BackendService.WatchTunnels:input_type -> apiserver.api.v1.WatchTunnelsRequest
	4, // 6: apiserver.api.v1.BackendService.ConnectTunnel:input_type -> apiserver.api.v1.TunnelMessage
	5, // 7: apiserver.api.v1.PeerService.WatchUpstreams:input_type -> apiserver.api.v1.WatchUpstreamsRequest
	1, // 8: apiserver.api.v1.BackendService.Login:output_type -> apiserver.api.v1.LoginResponse
	3, // 9: apiserver.api.v1.BackendService.WatchTunnels:output_type -> apiserver.api.v1.WatchTunnelsResponse
	4, // 10: apiserver.api.v1.BackendService.ConnectTunnel:output_type -> apiserver.api.v1.TunnelMessage
	6, // 11: apiserver.api.v1.PeerService.WatchUpstreams:output_type -> apiserver.api.v1.WatchUpstreamsResponse
	8, // [8:12] is the sub-list for method output_type
	4, // [4:8] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_tunnel_proto_init() }
func file_tunnel_proto_init() {
	if File_tunnel_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_tunnel_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*LoginResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTunnelsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchTunnelsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TunnelMessage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUpstreamsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_tunnel_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*WatchUpstreamsResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_tunnel_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   7,
			NumExtensions: 0,
			NumServices:   2,
		},
		GoTypes:           file_tunnel_proto_goTypes,
		DependencyIndexes: file_tunnel_proto_depIdxs,
		MessageInfos:      file_tunnel_proto_msgTypes,
	}.Build()
	File_tunnel_proto = out.File
	file_tunnel_proto_rawDesc = nil
	file_tunnel_proto_goTypes = nil
	file_tunnel_proto_depIdxs = nil
}
